From 6756f45061c9dc285d76e0fdb101bf6484a84628 Mon Sep 17 00:00:00 2001
From: YangKunlun <yangkunlun@gmail.com>
Date: Thu, 29 Oct 2015 22:04:23 +0800
Subject: [PATCH 1/4] Add configuration for cns3xxx ethernet

---
 drivers/net/ethernet/cavium/Kconfig | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/cavium/Kconfig b/drivers/net/ethernet/cavium/Kconfig
index 02e23e6..258f0ca 100644
--- a/drivers/net/ethernet/cavium/Kconfig
+++ b/drivers/net/ethernet/cavium/Kconfig
@@ -4,7 +4,7 @@
 
 config NET_VENDOR_CAVIUM
 	tristate "Cavium ethernet drivers"
-	depends on PCI
+	depends on PCI || ARCH_CNS3XXX
 	default y
 	---help---
 	  Select this option if you want enable Cavium network support.
@@ -13,9 +13,17 @@ config NET_VENDOR_CAVIUM
 
 if NET_VENDOR_CAVIUM
 
+config CNS3XXX_ETH
+	tristate "Cavium CNS3xxx Ethernet support"
+	depends on ARCH_CNS3XXX
+	select PHYLIB
+	help
+	  Say Y here if you want to use built-in Ethernet ports
+	  on CNS3XXX processor.
+
 config THUNDER_NIC_PF
 	tristate "Thunder Physical function driver"
-	depends on 64BIT
+	depends on 64BIT && PCI
 	select THUNDER_NIC_BGX
 	---help---
 	  This driver supports Thunder's NIC physical function.
@@ -27,20 +35,20 @@ config THUNDER_NIC_PF
 
 config THUNDER_NIC_VF
 	tristate "Thunder Virtual function driver"
-	depends on 64BIT
+	depends on 64BIT && PCI
 	---help---
 	  This driver supports Thunder's NIC virtual function
 
 config	THUNDER_NIC_BGX
 	tristate "Thunder MAC interface driver (BGX)"
-	depends on 64BIT
+	depends on 64BIT && PCI
 	---help---
 	  This driver supports programming and controlling of MAC
 	  interface from NIC physical function driver.
 
 config LIQUIDIO
 	tristate "Cavium LiquidIO support"
-	depends on 64BIT
+	depends on 64BIT && PCI
 	select PTP_1588_CLOCK
 	select FW_LOADER
 	select LIBCRC32C
-- 
2.1.4


From b867daa631410532bff13d8c2e843fb65d4e0131 Mon Sep 17 00:00:00 2001
From: YangKunlun <yangkunlun@gmail.com>
Date: Thu, 29 Oct 2015 22:06:26 +0800
Subject: [PATCH 2/4] Add ethernet device information in board file

---
 arch/arm/mach-cns3xxx/cns3420vb.c | 45 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/arch/arm/mach-cns3xxx/cns3420vb.c b/arch/arm/mach-cns3xxx/cns3420vb.c
index 6428bcc..59ab50a 100644
--- a/arch/arm/mach-cns3xxx/cns3420vb.c
+++ b/arch/arm/mach-cns3xxx/cns3420vb.c
@@ -31,6 +31,7 @@
 #include <asm/mach/arch.h>
 #include <asm/mach/map.h>
 #include <asm/mach/time.h>
+#include <linux/platform_data/cns3xxx.h>
 #include "cns3xxx.h"
 #include "pm.h"
 #include "core.h"
@@ -207,12 +208,56 @@ static struct platform_device cns3xxx_usb_ohci_device = {
 };
 
 /*
+ * Ethernet
+ */
+static struct cns3xxx_plat_info laguna_net_data = {
+	.ports = 0x01,
+	.phy = {
+		0,
+		1,
+		2,
+	},
+};
+
+static struct resource laguna_net_resource[] = {
+	{
+		.name = "eth0_mem",
+		.start = CNS3XXX_SWITCH_BASE,
+		.end = CNS3XXX_SWITCH_BASE + SZ_4K - 1,
+		.flags = IORESOURCE_MEM
+	}, {
+		.name = "eth_rx",
+		.start = IRQ_CNS3XXX_SW_R0RXC,
+		.end = IRQ_CNS3XXX_SW_R0RXC,
+		.flags = IORESOURCE_IRQ
+	}, {
+		.name = "eth_stat",
+		.start = IRQ_CNS3XXX_SW_STATUS,
+		.end = IRQ_CNS3XXX_SW_STATUS,
+		.flags = IORESOURCE_IRQ
+	}
+};
+
+static u64 laguna_net_dmamask = DMA_BIT_MASK(32);
+static struct platform_device laguna_net_device = {
+	.name = "cns3xxx_eth",
+	.num_resources = ARRAY_SIZE(laguna_net_resource),
+	.resource = laguna_net_resource,
+	.dev = {
+		.dma_mask = &laguna_net_dmamask,
+		.coherent_dma_mask = DMA_BIT_MASK(32),
+		.platform_data = &laguna_net_data,
+	}
+};
+
+/*
  * Initialization
  */
 static struct platform_device *cns3420_pdevs[] __initdata = {
 	&cns3420_nor_pdev,
 	&cns3xxx_usb_ehci_device,
 	&cns3xxx_usb_ohci_device,
+    &laguna_net_device,
 };
 
 static void __init cns3420_init(void)
-- 
2.1.4


From 3b30bdd3a2f1abfa8bf9067b9fba0564acb8fc73 Mon Sep 17 00:00:00 2001
From: YangKunlun <yangkunlun@gmail.com>
Date: Thu, 29 Oct 2015 22:09:38 +0800
Subject: [PATCH 3/4] Add ethernet fixes for Seagate Central NAS

The patch is still nasty, need to clean up and upstream to openwrt.
---
 drivers/net/ethernet/cavium/cns3xxx/cns3xxx_eth.c | 71 +++++++++++++++++++----
 1 file changed, 60 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/cavium/cns3xxx/cns3xxx_eth.c b/drivers/net/ethernet/cavium/cns3xxx/cns3xxx_eth.c
index e2db636..dd19b0e 100644
--- a/drivers/net/ethernet/cavium/cns3xxx/cns3xxx_eth.c
+++ b/drivers/net/ethernet/cavium/cns3xxx/cns3xxx_eth.c
@@ -56,7 +56,6 @@
 #define FIRST_SEGMENT 0x20000000
 #define LAST_SEGMENT 0x10000000
 #define FORCE_ROUTE 0x04000000
-#define IP_CHECKSUM 0x00040000
 #define UDP_CHECKSUM 0x00020000
 #define TCP_CHECKSUM 0x00010000
 
@@ -96,6 +95,19 @@
 #define MAC1_RX_ERROR 0x00200000
 #define MAC2_RX_ERROR 0x00400000
 
+/* MAC Clock - Seagate Central u-boot */
+#define MAC0_CLOCK_ENABLE   (1<<7)
+#define MAC1_CLOCK_ENABLE   (1<<15)
+#define MAC2_CLOCK_ENABLE   (1<<23)
+
+#define GMII_CLOCK_SKEW     0x00000050
+#define MAC_SPEED_1000          2
+#define MAC_SPEED_100           1
+#define MAC_SPEED_10            0
+
+#define MAC_DUPLEX_FULL         1
+#define MAC_DUPLEX_HALF         0
+
 struct tx_desc
 {
 	u32 sdp; /* segment data pointer */
@@ -714,15 +726,13 @@ static int eth_poll(struct napi_struct *napi, int budget)
 		}
 	}
 
-	rx_ring->cur_index = i;
-	if (!received) {
-		napi_complete(napi);
-		enable_irq(sw->rx_irq);
+    rx_ring->cur_index = i;
+    enable_irq(sw->rx_irq);
+    napi_complete(napi);
 
-		/* if rx descriptors are full schedule another poll */
-		if (rx_ring->desc[(i-1) & (RX_DESCS-1)].cown)
-			eth_schedule_poll(sw);
-	}
+    /* if rx descriptors are full schedule another poll */
+    if (rx_ring->desc[(i-1) & (RX_DESCS-1)].cown)
+        eth_schedule_poll(sw);
 
 	spin_lock_bh(&tx_lock);
 	eth_complete_tx(sw);
@@ -1001,7 +1011,7 @@ static int eth_open(struct net_device *dev)
 {
 	struct port *port = netdev_priv(dev);
 	struct sw *sw = port->sw;
-	u32 temp;
+	u32 temp, *xxx; int i;
 
 	port->speed = 0;	/* force "link up" message */
 	phy_start(port->phydev);
@@ -1034,6 +1044,36 @@ static int eth_open(struct net_device *dev)
 	ports_open++;
 	netif_carrier_on(dev);
 
+    xxx = (u32*)sw->regs;
+    printk(KERN_INFO "eth_open switch register before fix:\n");
+    for(i=0; i<offsetof(struct switch_regs, fs_desc_base_addr1)/4; i=i+8) {
+		printk(KERN_INFO "%04d: 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x\n",
+                i, xxx[i+0], xxx[i+1], xxx[i+2], xxx[i+3], 
+                xxx[i+4], xxx[i+5], xxx[i+6], xxx[i+7]);
+    }
+
+    //////////////////////////////////
+    temp = GMII_CLOCK_SKEW;
+	__raw_writel(temp, &sw->regs->clk_skew_ctrl);
+
+    temp = __raw_readl(&sw->regs->phy_auto_addr);
+    temp |= MAC0_CLOCK_ENABLE;
+	__raw_writel(temp, &sw->regs->phy_auto_addr);
+
+    //when detected phy speed change, should change this value
+    //see u-boot cns3xxx_gsw.c - line 237, nasty hack for Seagate Central
+    temp = __raw_readl(&sw->regs->mac_cfg[0]);
+    temp &= 0xFFFFF000; //the last 12 bits miss configured
+    temp |= (0x005bbe79 & 0x00000FFF);
+	__raw_writel(temp, &sw->regs->mac_cfg[0]);
+
+    printk(KERN_INFO "eth_open switch register after fix:\n");
+    for(i=0; i<offsetof(struct switch_regs, fs_desc_base_addr1)/4; i=i+8) {
+		printk(KERN_INFO "%04d: 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x\n",
+                i, xxx[i+0], xxx[i+1], xxx[i+2], xxx[i+3], 
+                xxx[i+4], xxx[i+5], xxx[i+6], xxx[i+7]);
+    }
+
 	return 0;
 }
 
@@ -1176,7 +1216,7 @@ static int eth_init_one(struct platform_device *pdev)
 	struct cns3xxx_plat_info *plat = pdev->dev.platform_data;
 	char phy_id[MII_BUS_ID_SIZE + 3];
 	int err;
-	u32 temp;
+	u32 temp, *xxx;
 	struct resource *res;
 	void __iomem *regs;
 
@@ -1203,6 +1243,15 @@ static int eth_init_one(struct platform_device *pdev)
 	sw->regs = regs;
 	sw->dev = &pdev->dev;
 
+    //////////////////////////////////
+    xxx = (u32*)regs;
+    printk(KERN_INFO "eth_init_one switch register left by u-boot:\n");
+    for(i=0; i<offsetof(struct switch_regs, fs_desc_base_addr1)/4; i=i+8) {
+		printk(KERN_INFO "%04d: 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x\n",
+                i, xxx[i+0], xxx[i+1], xxx[i+2], xxx[i+3], 
+                xxx[i+4], xxx[i+5], xxx[i+6], xxx[i+7]);
+    }
+
 	sw->rx_irq = platform_get_irq_byname(pdev, "eth_rx");
 	sw->stat_irq = platform_get_irq_byname(pdev, "eth_stat");
 
-- 
2.1.4


From 4fd3d9a45fc61e5dbb8c299fec2d64990800d6f9 Mon Sep 17 00:00:00 2001
From: YangKunlun <yangkunlun@gmail.com>
Date: Thu, 29 Oct 2015 22:53:19 +0800
Subject: [PATCH 4/4] Fixed issue in compiling the drive, tested works

---
 drivers/net/ethernet/cavium/Makefile | 1 +
 1 file changed, 1 insertion(+)

diff --git a/drivers/net/ethernet/cavium/Makefile b/drivers/net/ethernet/cavium/Makefile
index d22f886..1bef114 100644
--- a/drivers/net/ethernet/cavium/Makefile
+++ b/drivers/net/ethernet/cavium/Makefile
@@ -3,3 +3,4 @@
 #
 obj-$(CONFIG_NET_VENDOR_CAVIUM) += thunder/
 obj-$(CONFIG_NET_VENDOR_CAVIUM) += liquidio/
+obj-$(CONFIG_NET_VENDOR_CAVIUM) += cns3xxx/
-- 
2.1.4

