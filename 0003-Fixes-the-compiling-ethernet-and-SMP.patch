From 4b64e9c6caff5fd0413c33af1e9a5d712043a4d0 Mon Sep 17 00:00:00 2001
From: YangKunlun <yangkunlun@gmail.com>
Date: Tue, 3 Nov 2015 22:08:23 +0800
Subject: [PATCH] Fixes the compiling, ethernet and SMP

---
 arch/arm/mach-cns3xxx/cns3420vb.c         | 59 ++++++++++++++++++++++---------
 arch/arm/mach-cns3xxx/devices.c           |  8 ++---
 arch/arm/mach-cns3xxx/hotplug.c           |  1 +
 drivers/net/ethernet/cavium/cns3xxx_eth.c | 53 ++++++++++++++++++++++++++-
 4 files changed, 99 insertions(+), 22 deletions(-)

diff --git a/arch/arm/mach-cns3xxx/cns3420vb.c b/arch/arm/mach-cns3xxx/cns3420vb.c
index c457c6141..1d49d06d6 100644
--- a/arch/arm/mach-cns3xxx/cns3420vb.c
+++ b/arch/arm/mach-cns3xxx/cns3420vb.c
@@ -26,11 +26,13 @@
 #include <linux/mtd/partitions.h>
 #include <linux/usb/ehci_pdriver.h>
 #include <linux/usb/ohci_pdriver.h>
+#include <mach/gpio.h>
 #include <asm/setup.h>
 #include <asm/mach-types.h>
 #include <asm/mach/arch.h>
 #include <asm/mach/map.h>
 #include <asm/mach/time.h>
+#include <linux/platform_data/cns3xxx.h>
 #include "cns3xxx.h"
 #include "pm.h"
 #include "core.h"
@@ -206,35 +208,57 @@ static struct platform_device cns3xxx_usb_ohci_device = {
 	},
 };
 
-/* Watchdog */
-static struct resource cns3xxx_watchdog_resources[] = {
-	[0] = {
-		.start = CNS3XXX_TC11MP_TWD_BASE,
-		.end   = CNS3XXX_TC11MP_TWD_BASE + PAGE_SIZE - 1,
-		.flags = IORESOURCE_MEM,
+/*
+ * Ethernet
+ */
+static struct cns3xxx_plat_info laguna_net_data = {
+	.ports = 0x01,
+	.phy = {
+		0,
+		1,
+		2,
 	},
-	[1] = {
-		.start = IRQ_LOCALWDOG,
-		.end   = IRQ_LOCALWDOG,
-		.flags = IORESOURCE_IRQ,
+};
+
+static struct resource laguna_net_resource[] = {
+	{
+		.name = "eth0_mem",
+		.start = CNS3XXX_SWITCH_BASE,
+		.end = CNS3XXX_SWITCH_BASE + SZ_4K - 1,
+		.flags = IORESOURCE_MEM
+	}, {
+		.name = "eth_rx",
+		.start = IRQ_CNS3XXX_SW_R0RXC,
+		.end = IRQ_CNS3XXX_SW_R0RXC,
+		.flags = IORESOURCE_IRQ
+	}, {
+		.name = "eth_stat",
+		.start = IRQ_CNS3XXX_SW_STATUS,
+		.end = IRQ_CNS3XXX_SW_STATUS,
+		.flags = IORESOURCE_IRQ
 	}
 };
 
-static struct platform_device cns3xxx_watchdog_device = {
-	.name		= "mpcore_wdt",
-	.id		= -1,
-	.num_resources	= ARRAY_SIZE(cns3xxx_watchdog_resources),
-	.resource	= cns3xxx_watchdog_resources,
+static u64 laguna_net_dmamask = DMA_BIT_MASK(32);
+static struct platform_device laguna_net_device = {
+	.name = "cns3xxx_eth",
+	.num_resources = ARRAY_SIZE(laguna_net_resource),
+	.resource = laguna_net_resource,
+	.dev = {
+		.dma_mask = &laguna_net_dmamask,
+		.coherent_dma_mask = DMA_BIT_MASK(32),
+		.platform_data = &laguna_net_data,
+	}
 };
 
 /*
  * Initialization
  */
 static struct platform_device *cns3420_pdevs[] __initdata = {
-	&cns3xxx_watchdog_device,
 	&cns3420_nor_pdev,
 	&cns3xxx_usb_ehci_device,
 	&cns3xxx_usb_ohci_device,
+    &laguna_net_device,
 };
 
 static void __init cns3420_init(void)
@@ -268,7 +292,8 @@ static void __init cns3420_map_io(void)
 	cns3420_early_serial_setup();
 }
 
-MACHINE_START(CNS3420VB, "Cavium Networks CNS3420 Validation Board")
+MACHINE_START(CNS3420VB, "Seagate CNS3420 NAS")
+	.smp		= smp_ops(cns3xxx_smp_ops),
 	.atag_offset	= 0x100,
 	.map_io		= cns3420_map_io,
 	.init_irq	= cns3xxx_init_irq,
diff --git a/arch/arm/mach-cns3xxx/devices.c b/arch/arm/mach-cns3xxx/devices.c
index 0caed0529..0164d21d3 100644
--- a/arch/arm/mach-cns3xxx/devices.c
+++ b/arch/arm/mach-cns3xxx/devices.c
@@ -102,11 +102,11 @@ void __init cns3xxx_sdhci_init(void)
 	u32 gpioa_pins = __raw_readl(gpioa);
 
 	/* MMC/SD pins share with GPIOA */
-	if (machine_is_gw2388()) {
-		gpioa_pins |= 0x1fff0000;
-	} else {
+	//if (machine_is_gw2388()) {
+	//	gpioa_pins |= 0x1fff0000;
+	//} else {
 		gpioa_pins |= 0x1fff0004;
-	}
+	//}
 	__raw_writel(gpioa_pins, gpioa);
 
 	cns3xxx_pwr_clk_en(CNS3XXX_PWR_CLK_EN(SDIO));
diff --git a/arch/arm/mach-cns3xxx/hotplug.c b/arch/arm/mach-cns3xxx/hotplug.c
index be0d499a3..149afde9c 100644
--- a/arch/arm/mach-cns3xxx/hotplug.c
+++ b/arch/arm/mach-cns3xxx/hotplug.c
@@ -15,6 +15,7 @@
 #include <linux/smp.h>
 
 #include <asm/cacheflush.h>
+#include <asm/cp15.h>
 
 extern volatile int pen_release;
 
diff --git a/drivers/net/ethernet/cavium/cns3xxx_eth.c b/drivers/net/ethernet/cavium/cns3xxx_eth.c
index e2db63687..c098258d3 100644
--- a/drivers/net/ethernet/cavium/cns3xxx_eth.c
+++ b/drivers/net/ethernet/cavium/cns3xxx_eth.c
@@ -56,7 +56,6 @@
 #define FIRST_SEGMENT 0x20000000
 #define LAST_SEGMENT 0x10000000
 #define FORCE_ROUTE 0x04000000
-#define IP_CHECKSUM 0x00040000
 #define UDP_CHECKSUM 0x00020000
 #define TCP_CHECKSUM 0x00010000
 
@@ -96,6 +95,19 @@
 #define MAC1_RX_ERROR 0x00200000
 #define MAC2_RX_ERROR 0x00400000
 
+/* MAC Clock - Seagate Central u-boot */
+#define MAC0_CLOCK_ENABLE   (1<<7)
+#define MAC1_CLOCK_ENABLE   (1<<15)
+#define MAC2_CLOCK_ENABLE   (1<<23)
+
+#define GMII_CLOCK_SKEW     0x00000050
+#define MAC_SPEED_1000          2
+#define MAC_SPEED_100           1
+#define MAC_SPEED_10            0
+
+#define MAC_DUPLEX_FULL         1
+#define MAC_DUPLEX_HALF         0
+
 struct tx_desc
 {
 	u32 sdp; /* segment data pointer */
@@ -418,6 +430,8 @@ static void cns3xxx_adjust_link(struct net_device *dev)
 {
 	struct port *port = netdev_priv(dev);
 	struct phy_device *phydev = port->phydev;
+    struct sw * sw = port->sw;
+    u32 mac_cfg_new;
 
 	if (!phydev->link) {
 		if (port->speed) {
@@ -433,6 +447,19 @@ static void cns3xxx_adjust_link(struct net_device *dev)
 	port->speed = phydev->speed;
 	port->duplex = phydev->duplex;
 
+    //decode this part from u-boot source code!
+    mac_cfg_new = __raw_readl(&sw->regs->mac_cfg[port->id]);
+    mac_cfg_new &= (~(3 << 8));
+    if(port->speed == 1000)
+        mac_cfg_new |= (MAC_SPEED_1000 << 8);
+    else if(port->speed == 100)
+        mac_cfg_new |= (MAC_SPEED_100 << 8);
+
+    mac_cfg_new &= (~(1 << 10));
+    if(port->duplex)
+        mac_cfg_new |= (1<<10);
+    __raw_writel(mac_cfg_new, &sw->regs->mac_cfg[port->id]);
+
 	printk(KERN_INFO "%s: link up, speed %u Mb/s, %s duplex\n",
 	       dev->name, port->speed, port->duplex ? "full" : "half");
 }
@@ -997,6 +1024,17 @@ static void destroy_rings(struct sw *sw)
 	}
 }
 
+static void cns3xxx_print_switch_reg(const char *msg, u32 *xxx)
+{
+    int i;
+    printk(KERN_INFO "%s:\n", msg);
+    for(i=0; i<offsetof(struct switch_regs, fs_desc_base_addr1)/4; i=i+8) {
+		printk(KERN_INFO "%04d: 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x\n",
+                i, xxx[i+0], xxx[i+1], xxx[i+2], xxx[i+3], 
+                xxx[i+4], xxx[i+5], xxx[i+6], xxx[i+7]);
+    }
+}
+
 static int eth_open(struct net_device *dev)
 {
 	struct port *port = netdev_priv(dev);
@@ -1034,6 +1072,17 @@ static int eth_open(struct net_device *dev)
 	ports_open++;
 	netif_carrier_on(dev);
 
+    //cns3xxx_print_switch_reg("eth_open register before fix", (u32*)sw->regs);
+
+    temp = GMII_CLOCK_SKEW;
+	__raw_writel(temp, &sw->regs->clk_skew_ctrl);
+
+    temp = __raw_readl(&sw->regs->phy_auto_addr);
+    temp |= MAC0_CLOCK_ENABLE;
+	__raw_writel(temp, &sw->regs->phy_auto_addr);
+
+    //cns3xxx_print_switch_reg("eth_open register after fix", (u32*)sw->regs);
+
 	return 0;
 }
 
@@ -1203,6 +1252,8 @@ static int eth_init_one(struct platform_device *pdev)
 	sw->regs = regs;
 	sw->dev = &pdev->dev;
 
+    //cns3xxx_print_switch_reg("eth_init_one register left by u-boot:", (u32*)regs);
+
 	sw->rx_irq = platform_get_irq_byname(pdev, "eth_rx");
 	sw->stat_irq = platform_get_irq_byname(pdev, "eth_stat");
 
-- 
2.11.0

